// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  stores   Store[]

  @@map("users")
}

model Store {
  id        Int         @id @default(autoincrement())
  name      String?
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Billboard Billboard[] @relation("StoreToBillboard")
  Category  Category[]  @relation("StoreToCategory")
  Size      Size[]      @relation("StoreToSize")
  Color     Color[]     @relation("StoreToColor")
  Product   Product[]   @relation("StoreToProduct")
  Order     Order[]     @relation("StoreToOrder")

  @@index([userId])
  @@map("stores")
}

model Billboard {
  id       Int    @id @default(autoincrement())
  storeId  Int
  store    Store  @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  label    String
  imageUrl String

  Category  Category[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
  @@map("billboards")
}

model Category {
  id          Int       @id @default(autoincrement())
  storeId     Int
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId Int
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  Product     Product[] @relation("ProductToCategory")

  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
  @@map("categories")
}

model Size {
  id       Int       @id @default(autoincrement())
  storeId  Int
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]
  name     String
  value    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@map("sizes")
}

model Color {
  id       Int       @id @default(autoincrement())
  storeId  Int
  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]
  name     String
  value    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@map("colors")
}

model Product {
  id         Int         @id @default(autoincrement())
  storeId    Int
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId Int
  category   Category    @relation("ProductToCategory", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     Int
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    Int
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
  @@map("products")
}

model Image {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@map("images")
}

model Order {
  id         Int         @id @default(autoincrement())
  storeId    Int
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}
